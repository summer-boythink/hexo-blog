<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6复习-类</title>
    <url>2020/12/30/js/%E7%B1%BB/ES6%E5%A4%8D%E4%B9%A0-%E7%B1%BB/</url>
    <content><![CDATA[<a id="more"></a>
<h3 id="关于ES6的类从ES5构造函数中继承"><a href="#关于ES6的类从ES5构造函数中继承" class="headerlink" title="关于ES6的类从ES5构造函数中继承"></a>关于ES6的类从ES5构造函数中继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> A = &#123;</span><br><span class="line">  <span class="function"><span class="title">sayA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;a&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> B = &#123;</span><br><span class="line">  <span class="function"><span class="title">sayB</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;b&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixin</span>(<span class="params">...mixins</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> base = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  <span class="built_in">Object</span>.assign(base.prototype,...mixins);</span><br><span class="line">  <span class="keyword">return</span> base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">mixin</span>(<span class="title">B</span>,<span class="title">A</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.c = c</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> C(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c.sayA());</span><br></pre></td></tr></table></figure>
<ol>
<li>mixin函数是精髓，他通过Object.assign<code>拷贝源对象自身的并且可枚举的属性到目标对象</code><br>在base这个构造函数上 融合了A,B两个对象的所有可枚举方法 </li>
<li>因为用了extends 所以要用super <code>super类似call的继承，super(11) 是种限定语法 super(11)会执行父类的constructor 然后把11传进去</code></li>
<li>extends后面的构造函数必须有[[constructor]]属性 不然会报错</li>
</ol>
<h3 id="由对象派生数组"><a href="#由对象派生数组" class="headerlink" title="由对象派生数组"></a>由对象派生数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myarr</span> <span class="keyword">extends</span> <span class="title">Array</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> color = <span class="keyword">new</span> Myarr();</span><br></pre></td></tr></table></figure>
<ul>
<li>上面是ES6写法 没看懂ES5里面的问题 说派生类型的this再Array.apply之前先被调用了 所以length指向不准 </li>
</ul>
<h3 id="防止抽象类被new"><a href="#防止抽象类被new" class="headerlink" title="防止抽象类被new"></a>防止抽象类被new</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">new</span>.target === Shape)&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;抽象类不能被实例化&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">len,wid</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>()</span><br><span class="line">    <span class="built_in">this</span>.length = len;</span><br><span class="line">    <span class="built_in">this</span>.width = wid;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let x = new Shape(); //抛错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y = <span class="keyword">new</span> Rectangle(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(y <span class="keyword">instanceof</span> Shape);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>new.target</code> 总是能正确指向new他的那个类</li>
</ul>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6复习-数组</title>
    <url>2020/12/30/js/%E6%95%B0%E7%BB%84/ES6%E5%A4%8D%E4%B9%A0-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<a id="more"></a>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h3>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5的痛 难以创建一个长度的数组 </span></span><br><span class="line"><span class="keyword">let</span> item = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(items.length); <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(items[<span class="number">0</span>]); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> A = <span class="built_in">Array</span>.of(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(A.length); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(A[<span class="number">0</span>]); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>Array.of方便创建单元素数组</p>
<h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> helper = &#123;</span><br><span class="line">  diff : <span class="number">1</span>,</span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val + <span class="built_in">this</span>.diff;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tran</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">//&#123; &#x27;0&#x27;: 1, &#x27;1&#x27;: 2, &#x27;2&#x27;: 5 &#125;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>,helper.add,helper) <span class="comment">//因为用到helper.diff所以 第三个参数改变this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = tran(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(numbers); <span class="comment">//[ 2, 3, 6 ]</span></span><br></pre></td></tr></table></figure></li>
<li><p>Array.from把类数组对象变成数组</p>
</li>
<li><p>Array.from 也可以转换迭代器对象<code>* [Symbol.iterator]</code></p>
</li>
</ul>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3>   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">122</span>,<span class="number">32</span>];</span><br><span class="line"><span class="built_in">console</span>.log(nums.find(<span class="function"><span class="params">a</span> =&gt;</span> a&gt;<span class="number">10</span>)); <span class="comment">//122</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>findIndex 同理 不过返回的是索引</p>
<h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">mums.fill(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(nums) <span class="comment">//[1,1,1]</span></span><br></pre></td></tr></table></figure></li>
<li><p>替换数组每一项</p>
<h3 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>];</span><br><span class="line">nums.copyWithin(<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(nums); <span class="comment">//[ 1, 2, 1, 9 ]</span></span><br></pre></td></tr></table></figure></li>
<li><p>从索引2(包括2)开始粘贴 从索引0开始复制 索引1结束复制</p>
</li>
</ul>
<h2 id="定形数组"><a href="#定形数组" class="headerlink" title="定形数组"></a>定形数组</h2><h3 id="数组缓冲区"><a href="#数组缓冲区" class="headerlink" title="数组缓冲区"></a>数组缓冲区</h3>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">2</span>); <span class="comment">//这个Buffer共2字节</span></span><br><span class="line"><span class="built_in">console</span>.log(buffer.byteLength);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer) <span class="comment">//用来访问buffer</span></span><br><span class="line"><span class="built_in">console</span>.log(view.byteOffset);</span><br><span class="line"></span><br><span class="line">view.setInt8(<span class="number">0</span>,<span class="number">5</span>); <span class="comment">//框取一个8比特的位置 并且把5转换成8进制存入这个位置</span></span><br><span class="line">view.setInt8(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(view.getInt8(<span class="number">0</span>)); <span class="comment">//框取buffer中第一个8比特的位置 并且转换成10进制</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getInt16(<span class="number">0</span>)); <span class="comment">//这个表示在内存中框16个比特 并且拿到框取的元素的第一个(也就是索引0)</span></span><br></pre></td></tr></table></figure>
<h3 id="定形数组-1"><a href="#定形数组-1" class="headerlink" title="定形数组"></a>定形数组</h3><ul>
<li><p>定型数组其实就是对<code>let view = new DataView(buffer)</code> 做了层封装 更加方便set(setInt8) 和 get 元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="built_in">Int16Array</span>(<span class="number">2</span>), <span class="comment">//框2个16byte的定型数组位置</span></span><br><span class="line">floats = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([<span class="number">20.1</span>,<span class="number">33.3</span>]); <span class="comment">//框2个16byte的定型数组 索引0位置是20.1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ints.byteLength); <span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(ints.length);</span><br><span class="line"><span class="built_in">console</span>.log(floats[<span class="number">1</span>]); <span class="comment">//33.29999923706055</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>console.log(ints.byteLength); //4</code> 因为每个int16元素表示2字节</p>
<blockquote>
<p>定型数组与普通数组上行为有很大差异 具体可以查 比如没有pop push 但他有set()方法可以添加元素 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="built_in">Int16Array</span>([<span class="number">222</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(ints <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(ints)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6复习-promise</title>
    <url>2021/01/01/js/promise/ES6%E5%A4%8D%E4%B9%A0-promise/</url>
    <content><![CDATA[<a id="more"></a>
<h2 id="响应多个promise"><a href="#响应多个promise" class="headerlink" title="响应多个promise"></a>响应多个promise</h2><h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h4>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">let</span> p1 =  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">res,rej</span>)</span>&#123;</span><br><span class="line">    res(<span class="number">22</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> p2 = <span class="built_in">Promise</span>.resolve(<span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> p3 = <span class="built_in">Promise</span>.all([p1,p2]);  <span class="comment">//会等所有promise好了 再then</span></span><br><span class="line"></span><br><span class="line">  p3.then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(val)); <span class="comment">//true</span></span><br><span class="line">    <span class="built_in">console</span>.log(val[<span class="number">0</span>],val[<span class="number">1</span>]); <span class="comment">//22 55</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h4>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 =  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">res,rej</span>)</span>&#123;</span><br><span class="line">  res(<span class="number">22</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="built_in">Promise</span>.resolve(<span class="number">55</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="built_in">Promise</span>.race([p1,p2]);  <span class="comment">//返回最先promise完的那个 race后面传入的promise顺序会影响结果</span></span><br><span class="line"></span><br><span class="line">p3.then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(val)); <span class="comment">//false</span></span><br><span class="line">  <span class="built_in">console</span>.log(val); <span class="comment">//22</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>goruntine学习</title>
    <url>2021/01/01/go/goruntine%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<a id="more"></a>

<h3 id="goruntine"><a href="#goruntine" class="headerlink" title="goruntine"></a>goruntine</h3><ol>
<li>一个进程里面提供了很多的线程(M) 每个线程都可以处理goruntine 但是他不能直接处理 所以需要一个逻辑处理器(p)</li>
<li>P如果遇到很漫长的G 那么他就会把他分离出去 在外面再开个线程(M)去单独处理他</li>
</ol>
<blockquote>
<p>可以通过 <code>runtime.GOMAXPROCS(1);</code>来控制P 但是他控制的仅仅是P 没有规定M 程序依旧可以开多个线程来异步 </p>
</blockquote>
<ul>
<li>windows.GetCurrentThreadId() 可以获得目前线程Id` 例如下面代码<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime/debug&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;golang.org/x/sys/windows&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    runtime.GOMAXPROCS(<span class="number">2</span>)  <span class="comment">//runtime.GOMAXPROCS(1)</span></span><br><span class="line">    debug.SetMaxThreads(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line">    fmt.Println(windows.GetCurrentThreadId()) <span class="comment">//12320</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Starting Go Routines&quot;</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line">        <span class="keyword">for</span> char := <span class="string">&#x27;a&#x27;</span>; char &lt; <span class="string">&#x27;a&#x27;</span>+<span class="number">26</span>; char++ &#123;</span><br><span class="line">            chars := <span class="keyword">string</span>(char)</span><br><span class="line">            fmt.Println(chars,windows.GetCurrentThreadId()) <span class="comment">//13124</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> number := <span class="number">1</span>; number &lt; <span class="number">27</span>; number++ &#123;</span><br><span class="line">            fmt.Println(number,windows.GetCurrentThreadId()) <span class="comment">//12320</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;Waiting To Finish&quot;</span>)</span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;\nTerminating Program&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
改变<code>GOMAXPROCS(1)</code>会出现不一样的结果 从main进入goruntine的时候不会线程切换 但是goruntine执行完后会线程切换一下 然后又回到本来的线程<br>具体原因不知 待TODO</li>
</ul>
<h3 id="关于锁与并发安全"><a href="#关于锁与并发安全" class="headerlink" title="关于锁与并发安全"></a>关于锁与并发安全</h3><h4 id="源头"><a href="#源头" class="headerlink" title="源头"></a>源头</h4><blockquote>
<p>你在全局定义了一个int类型的数 然后你又开了2个goruntine 代码如下<br>  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++ &#123;</span><br><span class="line">		x = x + <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	wg.Add(<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	wg.Wait()</span><br><span class="line">	fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li><p>你会发现很离谱的事情 他可能不是100000 因为中间这个两个goruntine可能拿到了同一份x 两个goruntine同一份x++ 其实就加了1次</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ol>
<li>加锁<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">var</span> lock sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++ &#123;</span><br><span class="line">    lock.Lock() <span class="comment">// 加锁</span></span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line">    lock.Unlock() <span class="comment">// 解锁</span></span><br><span class="line">  &#125;</span><br><span class="line">  wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  wg.Add(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">go</span> add()</span><br><span class="line">  <span class="keyword">go</span> add()</span><br><span class="line">  wg.Wait()</span><br><span class="line">  fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>这就保证goruntine之间不会发生内存竞争，当然还有什么读写互斥锁 不详细展开</li>
</ul>
<ol start="2">
<li>用原子(atomic)层面操作<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;sync&quot;</span></span><br><span class="line">  <span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="comment">//var lock sync.Mutex</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++ &#123;</span><br><span class="line">    <span class="comment">// lock.Lock()</span></span><br><span class="line">    <span class="comment">// x = x + 1</span></span><br><span class="line">    <span class="comment">// lock.Unlock()</span></span><br><span class="line">    atomic.AddInt64(&amp;x,<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  wg.Add(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">go</span> add()</span><br><span class="line">  <span class="keyword">go</span> add()</span><br><span class="line">  wg.Wait()</span><br><span class="line">  fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>可以将上面函数改成这样 结果相同</li>
</ul>
</li>
</ul>
<h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3><h4 id="无缓冲通道"><a href="#无缓冲通道" class="headerlink" title="无缓冲通道"></a>无缓冲通道</h4><blockquote>
<p>类似于两个人打网球 一个人打过去必须有个人(goruntine)接收<br> <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">recv</span><span class="params">(c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	ret := &lt;-c</span><br><span class="line">	fmt.Println(<span class="string">&quot;接收成功&quot;</span>, ret)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">	<span class="keyword">go</span> recv(ch) <span class="comment">// 启用goroutine从通道接收值</span></span><br><span class="line">	ch &lt;- <span class="number">10</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;发送成功&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li><p>如果没人接收 会报错</p>
<h4 id="有缓冲通道"><a href="#有缓冲通道" class="headerlink" title="有缓冲通道"></a>有缓冲通道</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>) <span class="comment">// 创建一个容量为1的有缓冲区通道</span></span><br><span class="line">	ch &lt;- <span class="number">10</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;发送成功&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>GO</category>
      </categories>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>雪</title>
    <url>2020/12/29/%E6%9D%82/%E9%9B%AA/</url>
    <content><![CDATA[<p>来自远方的雪，从山头飒飒飘来。然后，然后就不知道写什么了。</p>
<a id="more"></a>
<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>来自远方的雪，从山头飒飒飘来。然后，然后就不知道写什么了。想起崔健的《蓝色的骨头》里面写的–男人越是闲着越是人缘好。 越是人缘好 让我情绪没有波动 就没有需要书写的情绪</p>
<p>这就像是在毫无波动的海面，没有任何风暴一样。那样的海洋还是大海吗？但是充满暴风雨的海面虽然波澜壮阔，可不也害的许多船只与水手葬生海底嘛。</p>
<p>对大海来说，他从不思考他将以何种形式存在。他任大自然在他心中随意缠绕。那我呢，是不是也该随着生活随缘的活着。</p>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>今年听到了 万能青年旅馆这支乐队 太触动人心灵了。 姬赓的词 即继承了中国古典文学 又让欧美文学化为己用 描写了时代变迁带给一代河北人的迷茫。其实，也是这个时代的迷茫。我们沉陷在无垠的电子荒原。时尚的时代使人的敏感性变弱。<br>这也让我 明白了一点。所谓古风 如果不能古为今用 那么他在文学上价值不过是狗屁。在自我营造的感动中感受所谓的美，这毫无意义。<br>我们活在这个时代 在体值的囚笼下 我们的心灵感觉比“垮掉的一代”更加“垮掉”。从上世纪20年代开始 迷茫的一代 再到垮<br>掉的一代 到现在我们算是麻木的一代吗</p>
<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>万能青年旅馆 应该可以在将来的历史里面 代表中国21世纪10年代的一代人的心灵情结。就如同 bob dylan代表的美国60年代美国人的心灵一样。姬赓的词确实有这个实力</p>
<h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>雪还会下，盖住时代的视野。</p>
]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>frist</title>
    <url>2020/12/29/%E6%9D%82/frist/</url>
    <content><![CDATA[<p>简简单单</p>
<a id="more"></a>

<h3 id="one"><a href="#one" class="headerlink" title="one"></a>one</h3><ul>
<li>title: frist<br>date: 2020-12-29 10:08:01<br>tags: 随笔<br>description: xxxxxxxtitle: frist<br>date: 2020-12-29 10:08:01<br>tags: 随笔<br>description: xxxxxxxtitle: frist<br>date: 2020-12-29 10:08:0<br>tags: 随笔<br>description: xxxxxxxtitle: frist<br>date: 2020-12-29 10:08:01<br>tags: 随笔<br>description: xxxxxxxtitle: frist<br>date: 2020-12-29 10:08:01<br>tags: 随笔<br>description: xxxxxxxtitle: frist<br>date: 2020-12-29 10:08:01<br>tags: 随笔<br>description: xxxxxxxtitle: frist<br>date: 2020-12-29 10:08:01<br>tags: 随笔<br>description: xxxxxxxtitle: frist<br>date: 2020-12-29 10:08:01<br>tags: 随笔<br>description: xxxxxxxtitle: frist<br>date: 2020-12-29 10:08:01<br>tags: 随笔<br>description: xxxxxxxtitle: frist<br>date: 2020-12-29 10:08:01<br>tags: 随笔<br>description: xxxxxxxtitle: frist<br>date: 2020-12-29 10:08:01<br>tags: 随笔<br>description: xxxxxxxtitle: frist<br>date: 2020-12-29 10:08:01<br>tags: 随笔</li>
</ul>
<h3 id="two"><a href="#two" class="headerlink" title="two"></a>two</h3><p>description: xxxxxxxtitle: frist<br>date: 2020-12-29 10:08:01<br>tags: 随笔<br>description: xxxxxxxtitle: frist<br>date: 2020-12-29 10:08:01<br>tags: 随笔<br>description: xxxxxxxtitle: frist<br>date: 2020-12-29 10:08:01<br>tags: 随笔<br>description: xxxxxxx</p>
<ul>
<li>weqwe<br><img src="http://p1.music.126.net/urGNzkRkLYYqU9sWVRvLfA==/109951164284564819.jpg?param=180y180" alt="这是图片" loading="lazy"></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let a &#x3D; 1</span><br><span class="line">console.log(a)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>2020/12/28/%E6%9D%82/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
